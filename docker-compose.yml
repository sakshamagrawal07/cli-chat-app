services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - kafka-network

  redis:
    image: redis:7.2-alpine
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - kafka-network

  postgres:
    image: postgres:15-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: cli-chat-app
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kafka-network
    restart: unless-stopped

  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: kafka-ui
  #   depends_on:
  #     - kafka
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #   networks:
  #     - kafka-network
  
  client:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: client
    container_name: client
    depends_on:
      - kafka
      - redis
      - postgres
    # environment:
    #   KAFKA_BROKER: kafka:29092
    #   REDIS_ADDR: redis:6379
    #   POSTGRES_HOST: postgres
    #   POSTGRES_PORT: 5432
    #   POSTGRES_DB: cli-chat-app
    #   POSTGRES_USER: admin
    #   POSTGRES_PASSWORD: admin
    # networks:
    #   - kafka-network
  
  server:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        SERVICE: server
    container_name: server
    depends_on:
      - kafka
      - redis
      - postgres
    ports:
      - "8081:8081"
    # environment:
    #   KAFKA_BROKER: kafka:29092
    #   REDIS_ADDR: redis:6379
    #   POSTGRES_HOST: postgres
    #   POSTGRES_PORT: 5432
    #   POSTGRES_DB: cli-chat-app
    #   POSTGRES_USER: admin
    #   POSTGRES_PASSWORD: admin
    # networks:
    #   - kafka-network
  
  consumer:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        SERVICE: consumer
    depends_on:
      - kafka
      - postgres

networks:
  kafka-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: